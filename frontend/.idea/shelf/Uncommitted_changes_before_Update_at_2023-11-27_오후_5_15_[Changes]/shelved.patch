Index: ../backend/src/main/java/com/javaProject/KNUAdministration/controller/BoardController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.javaProject.KNUAdministration.controller;\r\n\r\nimport com.javaProject.KNUAdministration.data.dto.BoardDto;\r\nimport com.javaProject.KNUAdministration.data.dto.BoardManagerUpdateDto;\r\nimport com.javaProject.KNUAdministration.service.Impl.BoardServiceImpl;\r\nimport lombok.RequiredArgsConstructor;\r\nimport lombok.extern.slf4j.Slf4j;\r\nimport org.springframework.http.HttpStatus;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.web.bind.annotation.*;\r\n\r\nimport java.util.List;\r\nimport java.util.NoSuchElementException;\r\n\r\n@Slf4j\r\n@RestController\r\n@RequiredArgsConstructor\r\n@RestControllerAdvice\r\npublic class BoardController {\r\n    private final BoardServiceImpl boardService;\r\n    //보드 단일조회\r\n    @GetMapping(\"/api/board/{boardId}\")\r\n    public ResponseEntity<BoardDto> showBoard(@PathVariable Long boardId){\r\n        BoardDto boardDto = boardService.selectBoard(boardId);\r\n        return (boardDto != null)?\r\n                ResponseEntity.status(HttpStatus.OK).body(boardDto):\r\n                ResponseEntity.status(HttpStatus.BAD_REQUEST).build();\r\n    }\r\n    //보드 전체조회 최신순\r\n    @GetMapping(\"/api/BoardList/Latest\")\r\n    public ResponseEntity<List<BoardDto>> showBoard(){\r\n        List<BoardDto> boardDtoList = boardService.allSelectBoard();\r\n        return (boardDtoList != null)?\r\n                ResponseEntity.status(HttpStatus.OK).body(boardDtoList):\r\n                ResponseEntity.status(HttpStatus.BAD_REQUEST).build();\r\n    }\r\n//    //보드 전체조회 오래된 순\r\n//    @GetMapping(\"/api/BoardList/Old\")\r\n//    public ResponseEntity<List<BoardDto>> showOldBoard(){\r\n//        List<BoardDto> boardDtoList = boardService.allSelectOldBoard();\r\n//        return (boardDtoList != null)?\r\n//                ResponseEntity.status(HttpStatus.OK).body(boardDtoList):\r\n//                ResponseEntity.status(HttpStatus.BAD_REQUEST).build();\r\n//    }\r\n    //사용자가 쓴 글 조회\r\n    @GetMapping(\"/api/BoardList/{accountId}\")\r\n    public ResponseEntity<List<BoardDto>> showMemberBoard(@PathVariable String accountId){\r\n        List<BoardDto> boardDtoList = boardService.allSelectMemberBoard(accountId);\r\n        return (boardDtoList != null)?\r\n                ResponseEntity.status(HttpStatus.OK).body(boardDtoList):\r\n                ResponseEntity.status(HttpStatus.BAD_REQUEST).build();\r\n    }\r\n    //사용자가 급해요한 글 전체조회\r\n    @GetMapping(\"/api/BoardList/{accountId}/haste\")\r\n    public ResponseEntity<List<BoardDto>> showMemberHasteBoard(@PathVariable String accountId){\r\n        List<BoardDto> boardDtoList = boardService.allSelectMemberHasteBoard(accountId);\r\n        return (boardDtoList != null)?\r\n                ResponseEntity.status(HttpStatus.OK).body(boardDtoList):\r\n                ResponseEntity.status(HttpStatus.BAD_REQUEST).build();\r\n    }\r\n    //급해요순 전체조회\r\n    @GetMapping(\"/api/BoardList/haste\")\r\n    public ResponseEntity<List<BoardDto>> showHasteBoard(){\r\n        List<BoardDto> BoardDtoList =boardService.allSelectHasteBoard();\r\n        return (BoardDtoList != null)?\r\n                ResponseEntity.status(HttpStatus.OK).body(BoardDtoList):\r\n                ResponseEntity.status(HttpStatus.BAD_REQUEST).build();\r\n    }\r\n    //조회수순 전체조회\r\n    @GetMapping(\"/api/BoardList/view\")\r\n    public ResponseEntity<List<BoardDto>> showViewBoard(){\r\n        List<BoardDto> BoardDtoList = boardService.allSelectViewBoard();\r\n        return (BoardDtoList != null)?\r\n                ResponseEntity.status(HttpStatus.OK).body(BoardDtoList):\r\n                ResponseEntity.status(HttpStatus.BAD_REQUEST).build();\r\n    }\r\n    //사용자의 진행상태별 민원개수\r\n    @GetMapping(\"/api/{accountId}/stateNum\")\r\n    public ResponseEntity<List<Integer>> showMemberState(@PathVariable String accountId){\r\n        List<Integer> list = boardService.MemberStateList(accountId);\r\n        return (list != null)?\r\n                ResponseEntity.status(HttpStatus.OK).body(list):\r\n                ResponseEntity.status(HttpStatus.BAD_REQUEST).build();\r\n    }\r\n    //사용자의 진행상태별 민원 전체조회\r\n    @GetMapping(\"/api/BoardList/state/{accountId}/{state}\")\r\n    public ResponseEntity<List<BoardDto>> showMemberState(@PathVariable String accountId,\r\n                                                                  @PathVariable int state){\r\n        List<BoardDto> list = boardService.MemberStateBoardList(accountId, state);\r\n        return (list != null)?\r\n                ResponseEntity.status(HttpStatus.OK).body(list):\r\n                ResponseEntity.status(HttpStatus.BAD_REQUEST).build();\r\n    }\r\n    //state별 전체 민원수 조회\r\n    @GetMapping(\"/api/state\")\r\n    public ResponseEntity<List<Integer>> showState(){\r\n        List<Integer> list = boardService.StateList();\r\n        return (list != null)?\r\n                ResponseEntity.status(HttpStatus.OK).body(list):\r\n                ResponseEntity.status(HttpStatus.BAD_REQUEST).build();\r\n    }\r\n    //state별 민원글 전체조회\r\n    @GetMapping(\"/api/BoardList/state/{state}\")\r\n    public ResponseEntity<List<BoardDto>> showStateBoardList(@PathVariable int state){\r\n        log.info(\"BoardController : showStateBoardList\");\r\n        List<BoardDto> list = boardService.AllSelectStateList(state);\r\n        return (list != null)?\r\n                ResponseEntity.status(HttpStatus.OK).body(list):\r\n                ResponseEntity.status(HttpStatus.BAD_REQUEST).build();\r\n    }\r\n    //카테고리별 state 개수\r\n    @GetMapping(\"/api/stateNum/{category}\")\r\n    public ResponseEntity<List<Integer>> showStateAndCategoryBoardList(@PathVariable String category){\r\n        List<Integer> list = boardService.categorySelectStateList(category);\r\n        return (list != null)?\r\n                ResponseEntity.status(HttpStatus.OK).body(list):\r\n                ResponseEntity.status(HttpStatus.BAD_REQUEST).build();\r\n    }\r\n    //관리자가 민원글 변경\r\n    @PatchMapping(\"/api/Board/{boardId}/manager\")\r\n    public ResponseEntity<BoardDto> updateManagement(@PathVariable Long boardId,\r\n                                                @RequestBody BoardManagerUpdateDto boardManagerUpdateDto){\r\n        BoardDto updated = boardService.updateBoardManager(boardId, boardManagerUpdateDto);\r\n        return(updated != null)?\r\n                ResponseEntity.status(HttpStatus.OK).body(updated):\r\n                ResponseEntity.status(HttpStatus.BAD_REQUEST).build();\r\n\r\n    }\r\n\r\n    //민원글 등록\r\n    @PostMapping(\"/api/board\")\r\n    public ResponseEntity<BoardDto> createBoard(@RequestBody BoardDto boardDto){\r\n        BoardDto created = boardService.insertBoard(boardDto);\r\n        return (created != null)?\r\n                ResponseEntity.status(HttpStatus.OK).body(created):\r\n                ResponseEntity.status(HttpStatus.BAD_REQUEST).build();\r\n    }\r\n    //민원글 수정\r\n    @PutMapping(\"/api/board\")\r\n    public ResponseEntity<BoardDto> updateBoard(@RequestBody BoardDto boardDto){\r\n        BoardDto updated = boardService.updateBoard(boardDto);\r\n        return (updated != null)?\r\n                ResponseEntity.status(HttpStatus.OK).body(updated):\r\n                ResponseEntity.status(HttpStatus.BAD_REQUEST).build();\r\n    }\r\n    //민원글 삭제\r\n    @DeleteMapping(\"/api/board/{boardId}\")\r\n    public ResponseEntity<BoardDto> deleteBoard(@PathVariable Long boardId){\r\n        BoardDto deleted = boardService.deleteBoard(boardId);\r\n        return (deleted != null)?\r\n                ResponseEntity.status(HttpStatus.OK).body(deleted):\r\n                ResponseEntity.status(HttpStatus.BAD_REQUEST).build();\r\n    }\r\n    //검색 요청\r\n    @GetMapping(\"/api/board/search/{keyword}\")\r\n    public ResponseEntity<List<BoardDto>> searchBoard(@PathVariable String keyword){\r\n        List<BoardDto> BoardDtoList = boardService.searchBoard(keyword);\r\n        return (BoardDtoList != null)?\r\n                ResponseEntity.status(HttpStatus.OK).body(BoardDtoList):\r\n                ResponseEntity.status(HttpStatus.BAD_REQUEST).build();\r\n    }\r\n    @ExceptionHandler(NoSuchFieldException.class)\r\n    public ResponseEntity<String> handleNoSuchFieldException() {\r\n        return ResponseEntity.status(HttpStatus.NOT_FOUND).body(\"정보를 찾을 수 없습니다\");\r\n    }\r\n    @ExceptionHandler(NoSuchElementException.class)\r\n    public ResponseEntity<String> handleNoSuchElementException(NoSuchElementException ex) {\r\n        return ResponseEntity.status(HttpStatus.NOT_FOUND).body(ex.getMessage());\r\n    }\r\n\r\n    @ExceptionHandler(Exception.class)\r\n    public ResponseEntity<String> handleException() {\r\n        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(\"실행 중 error가 발생했습니다\");\r\n    }\r\n//    @GetMapping(\"/api/board/search\")\r\n//    public List<Board> searchBoards(@RequestParam String keyword) {\r\n//        // 검색어를 사용하여 게시물을 검색하고 결과를 반환하는 로직을 구현\r\n//        List<Board> searchResults = boardService.searchBoards(keyword);\r\n//        return searchResults;\r\n//    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../backend/src/main/java/com/javaProject/KNUAdministration/controller/BoardController.java b/../backend/src/main/java/com/javaProject/KNUAdministration/controller/BoardController.java
--- a/../backend/src/main/java/com/javaProject/KNUAdministration/controller/BoardController.java	(revision e1e1ffa9c7996e26ce96600056ca3130d1e087d7)
+++ b/../backend/src/main/java/com/javaProject/KNUAdministration/controller/BoardController.java	(date 1701072881280)
@@ -34,14 +34,14 @@
                 ResponseEntity.status(HttpStatus.OK).body(boardDtoList):
                 ResponseEntity.status(HttpStatus.BAD_REQUEST).build();
     }
-//    //보드 전체조회 오래된 순
-//    @GetMapping("/api/BoardList/Old")
-//    public ResponseEntity<List<BoardDto>> showOldBoard(){
-//        List<BoardDto> boardDtoList = boardService.allSelectOldBoard();
-//        return (boardDtoList != null)?
-//                ResponseEntity.status(HttpStatus.OK).body(boardDtoList):
-//                ResponseEntity.status(HttpStatus.BAD_REQUEST).build();
-//    }
+    //보드 전체조회 오래된 순
+    @GetMapping("/api/BoardList/Old")
+    public ResponseEntity<List<BoardDto>> showOldBoard(){
+        List<BoardDto> boardDtoList = boardService.allSelectOldBoard();
+        return (boardDtoList != null)?
+                ResponseEntity.status(HttpStatus.OK).body(boardDtoList):
+                ResponseEntity.status(HttpStatus.BAD_REQUEST).build();
+    }
     //사용자가 쓴 글 조회
     @GetMapping("/api/BoardList/{accountId}")
     public ResponseEntity<List<BoardDto>> showMemberBoard(@PathVariable String accountId){
Index: ../backend/src/main/resources/application.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>spring.datasource.driverClassName=org.mariadb.jdbc.Driver\r\nspring.datasource.url=jdbc:mariadb://localhost:3306/KnuAdministrationDB\r\nspring.datasource.username=root\r\nspring.datasource.password=ec2532park\r\nspring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MariaDBDialect\r\nspring.jpa.hibernate.ddl-auto=update\r\nspring.jpa.properties.hibernate.format_sql=true\r\nspring.jpa.properties.hibernate.show_sql=true\r\nlogging.level.org.hibernate=TRACE
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/../backend/src/main/resources/application.properties b/../backend/src/main/resources/application.properties
--- a/../backend/src/main/resources/application.properties	(revision e1e1ffa9c7996e26ce96600056ca3130d1e087d7)
+++ b/../backend/src/main/resources/application.properties	(date 1701072881290)
@@ -1,7 +1,7 @@
 spring.datasource.driverClassName=org.mariadb.jdbc.Driver
-spring.datasource.url=jdbc:mariadb://localhost:3306/KnuAdministrationDB
+spring.datasource.url=jdbc:mariadb://localhost:3307/KnuAdministrationDB
 spring.datasource.username=root
-spring.datasource.password=ec2532park
+spring.datasource.password=0401
 spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MariaDBDialect
 spring.jpa.hibernate.ddl-auto=update
 spring.jpa.properties.hibernate.format_sql=true
